def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk17',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(name: 'git', image: 'alpine/git:latest', command: 'cat', ttyEnabled: true)
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def services = ['member', 'mysub', 'recommend']
        def gitManifestRepo = "https://github.com/hanson-dg0313/lifesub-manifest.git"

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers 설정
                    mkdir -p member/src/test/resources mysub-infra/src/test/resources recommend/src/test/resources
                    echo '${testContainersConfig}' > member/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > mysub-infra/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > recommend/src/test/resources/testcontainers.properties
                """

                // Member 서비스 빌드 및 SonarQube 분석
                withSonarQubeEnv('SonarQube') {
                    sh """
                        chmod +x gradlew

                        # 빌드 실행
                        ./gradlew :member:build :mysub-infra:build :recommend:build -x test

                        # Member 서비스
                        ./gradlew :member:test :member:jacocoTestReport :member:sonar \
                            -Dsonar.projectKey=lifesub-member-${props.teamid} \
                            -Dsonar.projectName=lifesub-member-${props.teamid} \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Recommend 서비스
                        ./gradlew :recommend:test :recommend:jacocoTestReport :recommend:sonar \
                            -Dsonar.projectKey=lifesub-recommend-${props.teamid} \
                            -Dsonar.projectName=lifesub-recommend-${props.teamid} \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                        # Mysub 서비스 (biz & infra 구조)
                        ./gradlew :mysub-infra:test :mysub-infra:jacocoTestReport :mysub-infra:sonar \
                            -Dsonar.projectKey=lifesub-mysub-${props.teamid} \
                            -Dsonar.projectName=lifesub-mysub-${props.teamid} \
                            -Dsonar.java.binaries=build/classes/java/main \
                            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                            -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                    """
                }
            }
        }

        stage('Quality Gate') {
            timeout(time: 10, unit: 'MINUTES') {
                def qg = waitForQualityGate()
                if (qg.status != 'OK') {
                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
        }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    services.each { service ->
                        def buildDir = service == 'mysub' ? 'mysub-infra' : service
                        def jarFile = service == 'mysub' ? 'mysub.jar' : "${service}.jar"

                        sh """
                            podman build \
                                --build-arg BUILD_LIB_DIR="${buildDir}/build/libs" \
                                --build-arg ARTIFACTORY_FILE="${jarFile}" \
                                -f deployment/Dockerfile \
                                -t ${props.registry}/${props.image_org}/${service}:${imageTag} .

                            podman push ${props.registry}/${props.image_org}/${service}:${imageTag}
                        """
                    }
                }
            }
        }

        stage('Update Git Manifests') {
            container('git') {
                withCredentials([usernamePassword(
                    credentialsId: 'github-credential-dg0313',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    // 임시 디렉토리 생성
                    sh "mkdir -p /tmp/manifests"

                    // Git 설정
                    sh """
                        cd /tmp/manifests
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/hanson-dg0313/lifesub-manifest.git .
                    """

                    // 각 서비스 이미지 업데이트
                    services.each { service ->
                        def imagePath = "${props.registry}/${props.image_org}/${service}:${imageTag}"

                        sh """
                            cd /tmp/manifests
                            # 이미지 태그 업데이트
                            sed -i 's|image: ${props.registry}/${props.image_org}/${service}:[^[:space:]]*|image: ${imagePath}|g' lifesub/deployments/${service}-deployment.yaml

                            # 변경사항 확인
                            echo "Updated manifest for ${service}:"
                            cat lifesub/deployments/${service}-deployment.yaml | grep -A 3 "image: "
                        """
                    }

                    // 변경사항 커밋 및 푸시
                    sh """
                        cd /tmp/manifests
                        git add .
                        git commit -m "Update backend images to tag ${imageTag} by Jenkins build #${env.BUILD_NUMBER}"
                        git push
                    """
                }
            }
        }
    }
}